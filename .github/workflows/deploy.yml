name: Deploy

on:
    push:
        branches:
            - main

# Define environment variables for easier configuration
env:
    SITE_DIR: ${{ vars.SITE_DIR || 'pumpcow.fun' }}
    SITE_NAME: ${{ vars.SITE_NAME || 'pumpcow' }}
    GIT_REMOTE: ${{ vars.GIT_REMOTE || 'github-memex:riat-cloud/memex.git' }}
    ENV_SOURCE: ${{ vars.ENV_SOURCE || 'envs/.pumpcow' }}
    WWW_DIR: ${{ vars.WWW_DIR || '/var/www' }}

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Deploy to server
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  port: ${{ secrets.PORT }}
                  key: ${{ secrets.SSHKEY }}
                  envs: SITE_DIR,SITE_NAME,GIT_REMOTE,ENV_SOURCE,WWW_DIR
                  script: |
                      set -e

                      # Set default values for environment variables
                      SITE_DIR=${SITE_DIR:-"scriptoshi.com"}
                      SITE_NAME=${SITE_NAME:-"scriptoshi"}
                      WWW_DIR=${WWW_DIR:-"/var/www"}

                      # Allow composer to run as root
                      export COMPOSER_ALLOW_SUPERUSER=1

                      echo "Deployment started ..."
                      echo "Deploying to site directory: $SITE_DIR"

                      # Clone fresh repository
                      rm -rf $WWW_DIR/$SITE_NAME
                      cd $WWW_DIR && git clone $GIT_REMOTE $SITE_NAME

                      # Copy environment file
                      cp $WWW_DIR/$ENV_SOURCE $WWW_DIR/$SITE_NAME/.env

                      echo "# Checkout main version of the app"
                      cd $WWW_DIR/$SITE_NAME && git checkout main

                      echo "# Install composer dependencies"
                      composer update --no-dev --no-interaction --prefer-dist --optimize-autoloader

                      echo "# Install & Compile npm assets"
                      npm i && npm run build
                      echo "Build complete!"

                      echo "# Run fresh database migrations"
                      php artisan migrate --force
                      echo "# seeding the database"
                      #php artisan db:seed --force

                      echo "Swapping Folders"
                      rm -rf ${WWW_DIR}/${SITE_NAME}_back
                      mv ${WWW_DIR}/${SITE_DIR} ${WWW_DIR}/${SITE_NAME}_back
                      mv ${WWW_DIR}/${SITE_NAME} ${WWW_DIR}/${SITE_DIR}

                      echo "# Handling storage directory"
                      [ -d "${WWW_DIR}/${SITE_NAME}_back/storage" ] && \
                      rm -r ${WWW_DIR}/${SITE_DIR}/storage
                      [ -d "${WWW_DIR}/${SITE_NAME}_back/storage" ] && \
                          mv ${WWW_DIR}/${SITE_NAME}_back/storage ${WWW_DIR}/${SITE_DIR}/storage

                      # Create upload directory
                      mkdir -p ${WWW_DIR}/${SITE_DIR}/storage/app/public/uploads/
                      rm -rf ${WWW_DIR}/${SITE_DIR}/storage/app/filepond || :

                      echo "# Run post installation setup"
                      cd ${WWW_DIR}/${SITE_DIR} && {
                          php artisan clear-compiled
                          php artisan optimize
                          php artisan storage:link
                          # Create installation marker
                          mkdir -p storage/app/public
                          echo "{\"installed_at\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"version\": \"$(php artisan --version | grep -oP 'Laravel Framework \K[\d.]+')\", \"app_version\": \"$(grep -oP "(?<='version' => ').*(?=')" config/app.php || echo '1.0.0')\"}" > storage/app/public/installed
                          chgrp -R www-data storage bootstrap/cache
                          chmod -R ug+rwx storage bootstrap/cache
                      }

                      echo "$SITE_DIR Deployment Finished"
